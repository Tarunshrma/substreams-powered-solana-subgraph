// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class BlockMeta {
  static encode(message: BlockMeta, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.number);

    writer.uint32(18);
    writer.string(message.hash);

    writer.uint32(26);
    writer.string(message.parentHash);
  }

  static decode(reader: Reader, length: i32): BlockMeta {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BlockMeta();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.number = reader.uint64();
          break;

        case 2:
          message.hash = reader.string();
          break;

        case 3:
          message.parentHash = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  number: u64;
  hash: string;
  parentHash: string;

  constructor(number: u64 = 0, hash: string = "", parentHash: string = "") {
    this.number = number;
    this.hash = hash;
    this.parentHash = parentHash;
  }
}
