// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class Event {
  static encode(message: Event, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.address);

    const topics = message.topics;
    if (topics.length !== 0) {
      for (let i: i32 = 0; i < topics.length; ++i) {
        writer.uint32(18);
        writer.string(topics[i]);
      }
    }

    writer.uint32(26);
    writer.string(message.txHash);
  }

  static decode(reader: Reader, length: i32): Event {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Event();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;

        case 2:
          message.topics.push(reader.string());
          break;

        case 3:
          message.txHash = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: string;
  topics: Array<string>;
  txHash: string;

  constructor(
    address: string = "",
    topics: Array<string> = [],
    txHash: string = ""
  ) {
    this.address = address;
    this.topics = topics;
    this.txHash = txHash;
  }
}
