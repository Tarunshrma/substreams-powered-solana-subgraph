// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Source } from "./Input/Source";
import { Map } from "./Input/Map";
import { Store } from "./Input/Store";
import { Params } from "./Input/Params";

export class Input {
  static encode(message: Input, writer: Writer): void {
    const source = message.source;
    if (source !== null) {
      writer.uint32(10);
      writer.fork();
      Source.encode(source, writer);
      writer.ldelim();
    }

    const map = message.map;
    if (map !== null) {
      writer.uint32(18);
      writer.fork();
      Map.encode(map, writer);
      writer.ldelim();
    }

    const store = message.store;
    if (store !== null) {
      writer.uint32(26);
      writer.fork();
      Store.encode(store, writer);
      writer.ldelim();
    }

    const params = message.params;
    if (params !== null) {
      writer.uint32(34);
      writer.fork();
      Params.encode(params, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Input {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Input();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.source = Source.decode(reader, reader.uint32());
          break;

        case 2:
          message.map = Map.decode(reader, reader.uint32());
          break;

        case 3:
          message.store = Store.decode(reader, reader.uint32());
          break;

        case 4:
          message.params = Params.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  source: Source | null;
  map: Map | null;
  store: Store | null;
  params: Params | null;

  constructor(
    source: Source | null = null,
    map: Map | null = null,
    store: Store | null = null,
    params: Params | null = null
  ) {
    this.source = source;
    this.map = map;
    this.store = store;
    this.params = params;
  }
}
