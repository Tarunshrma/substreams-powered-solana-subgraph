// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Module } from "./Module";
import { Binary } from "./Binary";

export class Modules {
  static encode(message: Modules, writer: Writer): void {
    const modules = message.modules;
    for (let i: i32 = 0; i < modules.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Module.encode(modules[i], writer);
      writer.ldelim();
    }

    const binaries = message.binaries;
    for (let i: i32 = 0; i < binaries.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Binary.encode(binaries[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Modules {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Modules();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.modules.push(Module.decode(reader, reader.uint32()));
          break;

        case 2:
          message.binaries.push(Binary.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  modules: Array<Module>;
  binaries: Array<Binary>;

  constructor(modules: Array<Module> = [], binaries: Array<Binary> = []) {
    this.modules = modules;
    this.binaries = binaries;
  }
}
