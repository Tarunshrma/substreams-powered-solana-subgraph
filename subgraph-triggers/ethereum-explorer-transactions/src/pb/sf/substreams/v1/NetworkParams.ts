// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class NetworkParams {
  static encode(message: NetworkParams, writer: Writer): void {
    const initialBlocks = message.initialBlocks;
    if (initialBlocks !== null) {
      const initialBlocksKeys = initialBlocks.keys();
      for (let i: i32 = 0; i < initialBlocksKeys.length; ++i) {
        const initialBlocksKey = initialBlocksKeys[i];
        writer.uint32(10);
        writer.fork();
        writer.uint32(10);
        writer.string(initialBlocksKey);
        writer.uint32(16);
        writer.uint64(initialBlocks.get(initialBlocksKey));
        writer.ldelim();
      }
    }

    const params = message.params;
    if (params !== null) {
      const paramsKeys = params.keys();
      for (let i: i32 = 0; i < paramsKeys.length; ++i) {
        const paramsKey = paramsKeys[i];
        writer.uint32(18);
        writer.fork();
        writer.uint32(10);
        writer.string(paramsKey);
        writer.uint32(18);
        writer.string(params.get(paramsKey));
        writer.ldelim();
      }
    }
  }

  static decode(reader: Reader, length: i32): NetworkParams {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new NetworkParams();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          let initialBlocksKey: string = "";
          let initialBlocksValue: u64 = 0;
          let initialBlocksHasKey: bool = false;
          let initialBlocksHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                initialBlocksKey = reader.string();
                initialBlocksHasKey = true;
                break;

              case 2:
                initialBlocksValue = reader.uint64();
                initialBlocksHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.initialBlocks === null) {
              message.initialBlocks = new Map<string, u64>();
            }
            const initialBlocks = message.initialBlocks;
            if (
              initialBlocks !== null &&
              initialBlocksHasKey &&
              initialBlocksHasValue
            ) {
              initialBlocks.set(initialBlocksKey, initialBlocksValue);
            }
          }
          break;

        case 2:
          let paramsKey: string = "";
          let paramsValue: string = "";
          let paramsHasKey: bool = false;
          let paramsHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                paramsKey = reader.string();
                paramsHasKey = true;
                break;

              case 2:
                paramsValue = reader.string();
                paramsHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.params === null) {
              message.params = new Map<string, string>();
            }
            const params = message.params;
            if (params !== null && paramsHasKey && paramsHasValue) {
              params.set(paramsKey, paramsValue);
            }
          }
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  initialBlocks: Map<string, u64>;
  params: Map<string, string>;

  constructor(
    initialBlocks: Map<string, u64> = new Map(),
    params: Map<string, string> = new Map()
  ) {
    this.initialBlocks = initialBlocks;
    this.params = params;
  }
}
