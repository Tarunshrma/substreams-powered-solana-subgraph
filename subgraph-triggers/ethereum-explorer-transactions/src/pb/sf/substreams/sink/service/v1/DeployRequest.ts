// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Package } from "../../../v1/Package";
import { Parameter } from "./Parameter";

export class DeployRequest {
  static encode(message: DeployRequest, writer: Writer): void {
    const substreamsPackage = message.substreamsPackage;
    if (substreamsPackage !== null) {
      writer.uint32(10);
      writer.fork();
      Package.encode(substreamsPackage, writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.bool(message.developmentMode);

    const parameters = message.parameters;
    for (let i: i32 = 0; i < parameters.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Parameter.encode(parameters[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): DeployRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DeployRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.substreamsPackage = Package.decode(reader, reader.uint32());
          break;

        case 2:
          message.developmentMode = reader.bool();
          break;

        case 3:
          message.parameters.push(Parameter.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  substreamsPackage: Package | null;
  developmentMode: bool;
  parameters: Array<Parameter>;

  constructor(
    substreamsPackage: Package | null = null,
    developmentMode: bool = false,
    parameters: Array<Parameter> = []
  ) {
    this.substreamsPackage = substreamsPackage;
    this.developmentMode = developmentMode;
    this.parameters = parameters;
  }
}
