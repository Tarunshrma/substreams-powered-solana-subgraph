// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { DeploymentStatus } from "./DeploymentStatus";

export class DeployResponse {
  static encode(message: DeployResponse, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.status);

    writer.uint32(18);
    writer.string(message.deploymentId);

    const services = message.services;
    if (services !== null) {
      const servicesKeys = services.keys();
      for (let i: i32 = 0; i < servicesKeys.length; ++i) {
        const servicesKey = servicesKeys[i];
        writer.uint32(26);
        writer.fork();
        writer.uint32(10);
        writer.string(servicesKey);
        writer.uint32(18);
        writer.string(services.get(servicesKey));
        writer.ldelim();
      }
    }

    writer.uint32(34);
    writer.string(message.reason);

    writer.uint32(42);
    writer.string(message.motd);
  }

  static decode(reader: Reader, length: i32): DeployResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DeployResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.status = reader.int32();
          break;

        case 2:
          message.deploymentId = reader.string();
          break;

        case 3:
          let servicesKey: string = "";
          let servicesValue: string = "";
          let servicesHasKey: bool = false;
          let servicesHasValue: bool = false;
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                servicesKey = reader.string();
                servicesHasKey = true;
                break;

              case 2:
                servicesValue = reader.string();
                servicesHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.services === null) {
              message.services = new Map<string, string>();
            }
            const services = message.services;
            if (services !== null && servicesHasKey && servicesHasValue) {
              services.set(servicesKey, servicesValue);
            }
          }
          break;

        case 4:
          message.reason = reader.string();
          break;

        case 5:
          message.motd = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  status: DeploymentStatus;
  deploymentId: string;
  services: Map<string, string>;
  reason: string;
  motd: string;

  constructor(
    status: DeploymentStatus = 0,
    deploymentId: string = "",
    services: Map<string, string> = new Map(),
    reason: string = "",
    motd: string = ""
  ) {
    this.status = status;
    this.deploymentId = deploymentId;
    this.services = services;
    this.reason = reason;
    this.motd = motd;
  }
}
