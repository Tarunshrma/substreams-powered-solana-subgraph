// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { PackageInfo } from "./PackageInfo";
import { SinkProgress } from "./SinkProgress";
import { DeploymentStatus } from "./DeploymentStatus";

export class DeploymentWithStatus {
  static encode(message: DeploymentWithStatus, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.id);

    writer.uint32(16);
    writer.int32(message.status);

    writer.uint32(26);
    writer.string(message.reason);

    const packageInfo = message.packageInfo;
    if (packageInfo !== null) {
      writer.uint32(34);
      writer.fork();
      PackageInfo.encode(packageInfo, writer);
      writer.ldelim();
    }

    const progress = message.progress;
    if (progress !== null) {
      writer.uint32(42);
      writer.fork();
      SinkProgress.encode(progress, writer);
      writer.ldelim();
    }

    writer.uint32(50);
    writer.string(message.motd);
  }

  static decode(reader: Reader, length: i32): DeploymentWithStatus {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DeploymentWithStatus();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.id = reader.string();
          break;

        case 2:
          message.status = reader.int32();
          break;

        case 3:
          message.reason = reader.string();
          break;

        case 4:
          message.packageInfo = PackageInfo.decode(reader, reader.uint32());
          break;

        case 5:
          message.progress = SinkProgress.decode(reader, reader.uint32());
          break;

        case 6:
          message.motd = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  id: string;
  status: DeploymentStatus;
  reason: string;
  packageInfo: PackageInfo | null;
  progress: SinkProgress | null;
  motd: string;

  constructor(
    id: string = "",
    status: DeploymentStatus = 0,
    reason: string = "",
    packageInfo: PackageInfo | null = null,
    progress: SinkProgress | null = null,
    motd: string = ""
  ) {
    this.id = id;
    this.status = status;
    this.reason = reason;
    this.packageInfo = packageInfo;
    this.progress = progress;
    this.motd = motd;
  }
}
