// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class Job {
  static encode(message: Job, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.stage);

    writer.uint32(16);
    writer.uint64(message.startBlock);

    writer.uint32(24);
    writer.uint64(message.stopBlock);

    writer.uint32(32);
    writer.uint64(message.processedBlocks);

    writer.uint32(40);
    writer.uint64(message.durationMs);
  }

  static decode(reader: Reader, length: i32): Job {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Job();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.stage = reader.uint32();
          break;

        case 2:
          message.startBlock = reader.uint64();
          break;

        case 3:
          message.stopBlock = reader.uint64();
          break;

        case 4:
          message.processedBlocks = reader.uint64();
          break;

        case 5:
          message.durationMs = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  stage: u32;
  startBlock: u64;
  stopBlock: u64;
  processedBlocks: u64;
  durationMs: u64;

  constructor(
    stage: u32 = 0,
    startBlock: u64 = 0,
    stopBlock: u64 = 0,
    processedBlocks: u64 = 0,
    durationMs: u64 = 0
  ) {
    this.stage = stage;
    this.startBlock = startBlock;
    this.stopBlock = stopBlock;
    this.processedBlocks = processedBlocks;
    this.durationMs = durationMs;
  }
}
