// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Any } from "../../../../google/protobuf/Any";
import { OutputDebugInfo } from "./OutputDebugInfo";

export class MapModuleOutput {
  static encode(message: MapModuleOutput, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    const mapOutput = message.mapOutput;
    if (mapOutput !== null) {
      writer.uint32(18);
      writer.fork();
      Any.encode(mapOutput, writer);
      writer.ldelim();
    }

    const debugInfo = message.debugInfo;
    if (debugInfo !== null) {
      writer.uint32(82);
      writer.fork();
      OutputDebugInfo.encode(debugInfo, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MapModuleOutput {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MapModuleOutput();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.mapOutput = Any.decode(reader, reader.uint32());
          break;

        case 10:
          message.debugInfo = OutputDebugInfo.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  mapOutput: Any | null;
  debugInfo: OutputDebugInfo | null;

  constructor(
    name: string = "",
    mapOutput: Any | null = null,
    debugInfo: OutputDebugInfo | null = null
  ) {
    this.name = name;
    this.mapOutput = mapOutput;
    this.debugInfo = debugInfo;
  }
}
