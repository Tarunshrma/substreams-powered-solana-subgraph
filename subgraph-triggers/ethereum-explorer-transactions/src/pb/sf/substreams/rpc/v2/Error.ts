// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class Error {
  static encode(message: Error, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.module);

    writer.uint32(18);
    writer.string(message.reason);

    const logs = message.logs;
    if (logs.length !== 0) {
      for (let i: i32 = 0; i < logs.length; ++i) {
        writer.uint32(26);
        writer.string(logs[i]);
      }
    }

    writer.uint32(32);
    writer.bool(message.logsTruncated);
  }

  static decode(reader: Reader, length: i32): Error {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Error();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.module = reader.string();
          break;

        case 2:
          message.reason = reader.string();
          break;

        case 3:
          message.logs.push(reader.string());
          break;

        case 4:
          message.logsTruncated = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  module: string;
  reason: string;
  logs: Array<string>;
  logsTruncated: bool;

  constructor(
    module: string = "",
    reason: string = "",
    logs: Array<string> = [],
    logsTruncated: bool = false
  ) {
    this.module = module;
    this.reason = reason;
    this.logs = logs;
    this.logsTruncated = logsTruncated;
  }
}
