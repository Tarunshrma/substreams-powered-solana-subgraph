// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { BlockRange } from "./BlockRange";

export class Stage {
  static encode(message: Stage, writer: Writer): void {
    const modules = message.modules;
    if (modules.length !== 0) {
      for (let i: i32 = 0; i < modules.length; ++i) {
        writer.uint32(10);
        writer.string(modules[i]);
      }
    }

    const completedRanges = message.completedRanges;
    for (let i: i32 = 0; i < completedRanges.length; ++i) {
      writer.uint32(18);
      writer.fork();
      BlockRange.encode(completedRanges[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Stage {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Stage();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.modules.push(reader.string());
          break;

        case 2:
          message.completedRanges.push(
            BlockRange.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  modules: Array<string>;
  completedRanges: Array<BlockRange>;

  constructor(
    modules: Array<string> = [],
    completedRanges: Array<BlockRange> = []
  ) {
    this.modules = modules;
    this.completedRanges = completedRanges;
  }
}
