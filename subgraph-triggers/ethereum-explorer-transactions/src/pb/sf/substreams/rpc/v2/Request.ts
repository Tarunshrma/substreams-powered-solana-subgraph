// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Modules } from "../../v1/Modules";

export class Request {
  static encode(message: Request, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.startBlockNum);

    writer.uint32(18);
    writer.string(message.startCursor);

    writer.uint32(24);
    writer.uint64(message.stopBlockNum);

    writer.uint32(32);
    writer.bool(message.finalBlocksOnly);

    writer.uint32(40);
    writer.bool(message.productionMode);

    writer.uint32(50);
    writer.string(message.outputModule);

    const modules = message.modules;
    if (modules !== null) {
      writer.uint32(58);
      writer.fork();
      Modules.encode(modules, writer);
      writer.ldelim();
    }

    const debugInitialStoreSnapshotForModules =
      message.debugInitialStoreSnapshotForModules;
    if (debugInitialStoreSnapshotForModules.length !== 0) {
      for (
        let i: i32 = 0;
        i < debugInitialStoreSnapshotForModules.length;
        ++i
      ) {
        writer.uint32(82);
        writer.string(debugInitialStoreSnapshotForModules[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): Request {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Request();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.startBlockNum = reader.int64();
          break;

        case 2:
          message.startCursor = reader.string();
          break;

        case 3:
          message.stopBlockNum = reader.uint64();
          break;

        case 4:
          message.finalBlocksOnly = reader.bool();
          break;

        case 5:
          message.productionMode = reader.bool();
          break;

        case 6:
          message.outputModule = reader.string();
          break;

        case 7:
          message.modules = Modules.decode(reader, reader.uint32());
          break;

        case 10:
          message.debugInitialStoreSnapshotForModules.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  startBlockNum: i64;
  startCursor: string;
  stopBlockNum: u64;
  finalBlocksOnly: bool;
  productionMode: bool;
  outputModule: string;
  modules: Modules | null;
  debugInitialStoreSnapshotForModules: Array<string>;

  constructor(
    startBlockNum: i64 = 0,
    startCursor: string = "",
    stopBlockNum: u64 = 0,
    finalBlocksOnly: bool = false,
    productionMode: bool = false,
    outputModule: string = "",
    modules: Modules | null = null,
    debugInitialStoreSnapshotForModules: Array<string> = []
  ) {
    this.startBlockNum = startBlockNum;
    this.startCursor = startCursor;
    this.stopBlockNum = stopBlockNum;
    this.finalBlocksOnly = finalBlocksOnly;
    this.productionMode = productionMode;
    this.outputModule = outputModule;
    this.modules = modules;
    this.debugInitialStoreSnapshotForModules =
      debugInitialStoreSnapshotForModules;
  }
}
