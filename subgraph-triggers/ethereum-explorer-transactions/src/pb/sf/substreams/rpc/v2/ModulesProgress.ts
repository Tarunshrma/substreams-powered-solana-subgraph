// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Job } from "./Job";
import { ModuleStats } from "./ModuleStats";
import { Stage } from "./Stage";
import { ProcessedBytes } from "./ProcessedBytes";

export class ModulesProgress {
  static encode(message: ModulesProgress, writer: Writer): void {
    const runningJobs = message.runningJobs;
    for (let i: i32 = 0; i < runningJobs.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Job.encode(runningJobs[i], writer);
      writer.ldelim();
    }

    const modulesStats = message.modulesStats;
    for (let i: i32 = 0; i < modulesStats.length; ++i) {
      writer.uint32(26);
      writer.fork();
      ModuleStats.encode(modulesStats[i], writer);
      writer.ldelim();
    }

    const stages = message.stages;
    for (let i: i32 = 0; i < stages.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Stage.encode(stages[i], writer);
      writer.ldelim();
    }

    const processedBytes = message.processedBytes;
    if (processedBytes !== null) {
      writer.uint32(42);
      writer.fork();
      ProcessedBytes.encode(processedBytes, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ModulesProgress {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ModulesProgress();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          message.runningJobs.push(Job.decode(reader, reader.uint32()));
          break;

        case 3:
          message.modulesStats.push(
            ModuleStats.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.stages.push(Stage.decode(reader, reader.uint32()));
          break;

        case 5:
          message.processedBytes = ProcessedBytes.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  runningJobs: Array<Job>;
  modulesStats: Array<ModuleStats>;
  stages: Array<Stage>;
  processedBytes: ProcessedBytes | null;

  constructor(
    runningJobs: Array<Job> = [],
    modulesStats: Array<ModuleStats> = [],
    stages: Array<Stage> = [],
    processedBytes: ProcessedBytes | null = null
  ) {
    this.runningJobs = runningJobs;
    this.modulesStats = modulesStats;
    this.stages = stages;
    this.processedBytes = processedBytes;
  }
}
