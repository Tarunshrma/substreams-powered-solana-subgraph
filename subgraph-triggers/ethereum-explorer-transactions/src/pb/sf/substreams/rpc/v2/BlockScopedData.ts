// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { MapModuleOutput } from "./MapModuleOutput";
import { Clock } from "../../v1/Clock";
import { StoreModuleOutput } from "./StoreModuleOutput";

export class BlockScopedData {
  static encode(message: BlockScopedData, writer: Writer): void {
    const output = message.output;
    if (output !== null) {
      writer.uint32(10);
      writer.fork();
      MapModuleOutput.encode(output, writer);
      writer.ldelim();
    }

    const clock = message.clock;
    if (clock !== null) {
      writer.uint32(18);
      writer.fork();
      Clock.encode(clock, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.cursor);

    writer.uint32(32);
    writer.uint64(message.finalBlockHeight);

    const debugMapOutputs = message.debugMapOutputs;
    for (let i: i32 = 0; i < debugMapOutputs.length; ++i) {
      writer.uint32(82);
      writer.fork();
      MapModuleOutput.encode(debugMapOutputs[i], writer);
      writer.ldelim();
    }

    const debugStoreOutputs = message.debugStoreOutputs;
    for (let i: i32 = 0; i < debugStoreOutputs.length; ++i) {
      writer.uint32(90);
      writer.fork();
      StoreModuleOutput.encode(debugStoreOutputs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): BlockScopedData {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BlockScopedData();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.output = MapModuleOutput.decode(reader, reader.uint32());
          break;

        case 2:
          message.clock = Clock.decode(reader, reader.uint32());
          break;

        case 3:
          message.cursor = reader.string();
          break;

        case 4:
          message.finalBlockHeight = reader.uint64();
          break;

        case 10:
          message.debugMapOutputs.push(
            MapModuleOutput.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.debugStoreOutputs.push(
            StoreModuleOutput.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  output: MapModuleOutput | null;
  clock: Clock | null;
  cursor: string;
  finalBlockHeight: u64;
  debugMapOutputs: Array<MapModuleOutput>;
  debugStoreOutputs: Array<StoreModuleOutput>;

  constructor(
    output: MapModuleOutput | null = null,
    clock: Clock | null = null,
    cursor: string = "",
    finalBlockHeight: u64 = 0,
    debugMapOutputs: Array<MapModuleOutput> = [],
    debugStoreOutputs: Array<StoreModuleOutput> = []
  ) {
    this.output = output;
    this.clock = clock;
    this.cursor = cursor;
    this.finalBlockHeight = finalBlockHeight;
    this.debugMapOutputs = debugMapOutputs;
    this.debugStoreOutputs = debugStoreOutputs;
  }
}
