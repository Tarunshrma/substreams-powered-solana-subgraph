// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { BlockRef } from "../../v1/BlockRef";

export class BlockUndoSignal {
  static encode(message: BlockUndoSignal, writer: Writer): void {
    const lastValidBlock = message.lastValidBlock;
    if (lastValidBlock !== null) {
      writer.uint32(10);
      writer.fork();
      BlockRef.encode(lastValidBlock, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.lastValidCursor);
  }

  static decode(reader: Reader, length: i32): BlockUndoSignal {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BlockUndoSignal();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.lastValidBlock = BlockRef.decode(reader, reader.uint32());
          break;

        case 2:
          message.lastValidCursor = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  lastValidBlock: BlockRef | null;
  lastValidCursor: string;

  constructor(
    lastValidBlock: BlockRef | null = null,
    lastValidCursor: string = ""
  ) {
    this.lastValidBlock = lastValidBlock;
    this.lastValidCursor = lastValidCursor;
  }
}
