// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class OutputDebugInfo {
  static encode(message: OutputDebugInfo, writer: Writer): void {
    const logs = message.logs;
    if (logs.length !== 0) {
      for (let i: i32 = 0; i < logs.length; ++i) {
        writer.uint32(10);
        writer.string(logs[i]);
      }
    }

    writer.uint32(16);
    writer.bool(message.logsTruncated);

    writer.uint32(24);
    writer.bool(message.cached);
  }

  static decode(reader: Reader, length: i32): OutputDebugInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new OutputDebugInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.logs.push(reader.string());
          break;

        case 2:
          message.logsTruncated = reader.bool();
          break;

        case 3:
          message.cached = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  logs: Array<string>;
  logsTruncated: bool;
  cached: bool;

  constructor(
    logs: Array<string> = [],
    logsTruncated: bool = false,
    cached: bool = false
  ) {
    this.logs = logs;
    this.logsTruncated = logsTruncated;
    this.cached = cached;
  }
}
