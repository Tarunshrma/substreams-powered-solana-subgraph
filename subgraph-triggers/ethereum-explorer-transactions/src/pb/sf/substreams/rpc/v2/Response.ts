// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { SessionInit } from "./SessionInit";
import { ModulesProgress } from "./ModulesProgress";
import { BlockScopedData } from "./BlockScopedData";
import { BlockUndoSignal } from "./BlockUndoSignal";
import { Error } from "./Error";
import { InitialSnapshotData } from "./InitialSnapshotData";
import { InitialSnapshotComplete } from "./InitialSnapshotComplete";

export class Response {
  static encode(message: Response, writer: Writer): void {
    const session = message.session;
    if (session !== null) {
      writer.uint32(10);
      writer.fork();
      SessionInit.encode(session, writer);
      writer.ldelim();
    }

    const progress = message.progress;
    if (progress !== null) {
      writer.uint32(18);
      writer.fork();
      ModulesProgress.encode(progress, writer);
      writer.ldelim();
    }

    const blockScopedData = message.blockScopedData;
    if (blockScopedData !== null) {
      writer.uint32(26);
      writer.fork();
      BlockScopedData.encode(blockScopedData, writer);
      writer.ldelim();
    }

    const blockUndoSignal = message.blockUndoSignal;
    if (blockUndoSignal !== null) {
      writer.uint32(34);
      writer.fork();
      BlockUndoSignal.encode(blockUndoSignal, writer);
      writer.ldelim();
    }

    const fatalError = message.fatalError;
    if (fatalError !== null) {
      writer.uint32(42);
      writer.fork();
      Error.encode(fatalError, writer);
      writer.ldelim();
    }

    const debugSnapshotData = message.debugSnapshotData;
    if (debugSnapshotData !== null) {
      writer.uint32(82);
      writer.fork();
      InitialSnapshotData.encode(debugSnapshotData, writer);
      writer.ldelim();
    }

    const debugSnapshotComplete = message.debugSnapshotComplete;
    if (debugSnapshotComplete !== null) {
      writer.uint32(90);
      writer.fork();
      InitialSnapshotComplete.encode(debugSnapshotComplete, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Response {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Response();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.session = SessionInit.decode(reader, reader.uint32());
          break;

        case 2:
          message.progress = ModulesProgress.decode(reader, reader.uint32());
          break;

        case 3:
          message.blockScopedData = BlockScopedData.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.blockUndoSignal = BlockUndoSignal.decode(
            reader,
            reader.uint32()
          );
          break;

        case 5:
          message.fatalError = Error.decode(reader, reader.uint32());
          break;

        case 10:
          message.debugSnapshotData = InitialSnapshotData.decode(
            reader,
            reader.uint32()
          );
          break;

        case 11:
          message.debugSnapshotComplete = InitialSnapshotComplete.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  session: SessionInit | null;
  progress: ModulesProgress | null;
  blockScopedData: BlockScopedData | null;
  blockUndoSignal: BlockUndoSignal | null;
  fatalError: Error | null;
  debugSnapshotData: InitialSnapshotData | null;
  debugSnapshotComplete: InitialSnapshotComplete | null;

  constructor(
    session: SessionInit | null = null,
    progress: ModulesProgress | null = null,
    blockScopedData: BlockScopedData | null = null,
    blockUndoSignal: BlockUndoSignal | null = null,
    fatalError: Error | null = null,
    debugSnapshotData: InitialSnapshotData | null = null,
    debugSnapshotComplete: InitialSnapshotComplete | null = null
  ) {
    this.session = session;
    this.progress = progress;
    this.blockScopedData = blockScopedData;
    this.blockUndoSignal = blockUndoSignal;
    this.fatalError = fatalError;
    this.debugSnapshotData = debugSnapshotData;
    this.debugSnapshotComplete = debugSnapshotComplete;
  }
}
