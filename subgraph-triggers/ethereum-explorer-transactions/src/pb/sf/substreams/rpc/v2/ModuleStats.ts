// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { ExternalCallMetric } from "./ExternalCallMetric";

export class ModuleStats {
  static encode(message: ModuleStats, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(16);
    writer.uint64(message.totalProcessedBlockCount);

    writer.uint32(24);
    writer.uint64(message.totalProcessingTimeMs);

    const externalCallMetrics = message.externalCallMetrics;
    for (let i: i32 = 0; i < externalCallMetrics.length; ++i) {
      writer.uint32(34);
      writer.fork();
      ExternalCallMetric.encode(externalCallMetrics[i], writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.uint64(message.totalStoreOperationTimeMs);

    writer.uint32(48);
    writer.uint64(message.totalStoreReadCount);

    writer.uint32(80);
    writer.uint64(message.totalStoreWriteCount);

    writer.uint32(88);
    writer.uint64(message.totalStoreDeleteprefixCount);

    writer.uint32(96);
    writer.uint64(message.storeSizeBytes);

    writer.uint32(104);
    writer.uint64(message.totalStoreMergingTimeMs);

    writer.uint32(112);
    writer.bool(message.storeCurrentlyMerging);

    writer.uint32(120);
    writer.uint64(message.highestContiguousBlock);
  }

  static decode(reader: Reader, length: i32): ModuleStats {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ModuleStats();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.totalProcessedBlockCount = reader.uint64();
          break;

        case 3:
          message.totalProcessingTimeMs = reader.uint64();
          break;

        case 4:
          message.externalCallMetrics.push(
            ExternalCallMetric.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.totalStoreOperationTimeMs = reader.uint64();
          break;

        case 6:
          message.totalStoreReadCount = reader.uint64();
          break;

        case 10:
          message.totalStoreWriteCount = reader.uint64();
          break;

        case 11:
          message.totalStoreDeleteprefixCount = reader.uint64();
          break;

        case 12:
          message.storeSizeBytes = reader.uint64();
          break;

        case 13:
          message.totalStoreMergingTimeMs = reader.uint64();
          break;

        case 14:
          message.storeCurrentlyMerging = reader.bool();
          break;

        case 15:
          message.highestContiguousBlock = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  totalProcessedBlockCount: u64;
  totalProcessingTimeMs: u64;
  externalCallMetrics: Array<ExternalCallMetric>;
  totalStoreOperationTimeMs: u64;
  totalStoreReadCount: u64;
  totalStoreWriteCount: u64;
  totalStoreDeleteprefixCount: u64;
  storeSizeBytes: u64;
  totalStoreMergingTimeMs: u64;
  storeCurrentlyMerging: bool;
  highestContiguousBlock: u64;

  constructor(
    name: string = "",
    totalProcessedBlockCount: u64 = 0,
    totalProcessingTimeMs: u64 = 0,
    externalCallMetrics: Array<ExternalCallMetric> = [],
    totalStoreOperationTimeMs: u64 = 0,
    totalStoreReadCount: u64 = 0,
    totalStoreWriteCount: u64 = 0,
    totalStoreDeleteprefixCount: u64 = 0,
    storeSizeBytes: u64 = 0,
    totalStoreMergingTimeMs: u64 = 0,
    storeCurrentlyMerging: bool = false,
    highestContiguousBlock: u64 = 0
  ) {
    this.name = name;
    this.totalProcessedBlockCount = totalProcessedBlockCount;
    this.totalProcessingTimeMs = totalProcessingTimeMs;
    this.externalCallMetrics = externalCallMetrics;
    this.totalStoreOperationTimeMs = totalStoreOperationTimeMs;
    this.totalStoreReadCount = totalStoreReadCount;
    this.totalStoreWriteCount = totalStoreWriteCount;
    this.totalStoreDeleteprefixCount = totalStoreDeleteprefixCount;
    this.storeSizeBytes = storeSizeBytes;
    this.totalStoreMergingTimeMs = totalStoreMergingTimeMs;
    this.storeCurrentlyMerging = storeCurrentlyMerging;
    this.highestContiguousBlock = highestContiguousBlock;
  }
}
