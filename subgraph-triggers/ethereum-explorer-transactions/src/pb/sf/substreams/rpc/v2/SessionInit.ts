// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";

export class SessionInit {
  static encode(message: SessionInit, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.traceId);

    writer.uint32(16);
    writer.uint64(message.resolvedStartBlock);

    writer.uint32(24);
    writer.uint64(message.linearHandoffBlock);

    writer.uint32(32);
    writer.uint64(message.maxParallelWorkers);
  }

  static decode(reader: Reader, length: i32): SessionInit {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SessionInit();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.traceId = reader.string();
          break;

        case 2:
          message.resolvedStartBlock = reader.uint64();
          break;

        case 3:
          message.linearHandoffBlock = reader.uint64();
          break;

        case 4:
          message.maxParallelWorkers = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  traceId: string;
  resolvedStartBlock: u64;
  linearHandoffBlock: u64;
  maxParallelWorkers: u64;

  constructor(
    traceId: string = "",
    resolvedStartBlock: u64 = 0,
    linearHandoffBlock: u64 = 0,
    maxParallelWorkers: u64 = 0
  ) {
    this.traceId = traceId;
    this.resolvedStartBlock = resolvedStartBlock;
    this.linearHandoffBlock = linearHandoffBlock;
    this.maxParallelWorkers = maxParallelWorkers;
  }
}
